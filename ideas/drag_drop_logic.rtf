{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf110
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww25400\viewh16000\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 abstract bool canDrag (index): \'97 this is only called once when the dragging begins\
	FreeCellSpace: return true\
	Foundation: return false\
	Cascade: if current card to the top of the stack sublist \'93is a tableau\'94 (loop) AND sublist\'92s size <= (num of free cells + 1) * 2 * num of empty cascades\
\
abstract bool canDrop (cards):\
	FreeCellSpace: if drag list of cards size == 1, and cards in stack list is empty, return true\
	Foundation: if drag list of cards size == 1, and card at top of stack list is one less and same suit, or the dropped card is Ace of X and Stack is empty with suit == X, return true\
	Cascade: (assume the dragged list is a tableau) If first item in drag list is one less than Face of last item in stack list, AND card is opposite color, return true.\
\
void doDrop (cards):\
	\{base\}: \
\
Point getCardPosition (index):\
	\{base\}: return stack panel position\
	Cascade: return card offset + cascade position\
\
Point getCardOffset (index):\
	\{base\}: return 0,0\
	Cascade: return 0,index * cascade gap}